name: build-test-publish
on: push
jobs:
  build-test-publish:
    if: ${{ github.ref_name == 'master' || github.ref_name == 'develop' }}
    runs-on: ubuntu-latest
    steps:
    - name: Dump context
      run: echo '${{ toJSON(github) }}'
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup .NET toolchain
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0.x
    - name: Determine configuration
      run: |
        if [[ "${{ github.ref_name }}" == "master" ]]; then
          echo "CONFIGURATION=Release" >> $GITHUB_ENV
        else
          echo "CONFIGURATION=Debug" >> $GITHUB_ENV
        fi
    - name: Install GitVersion
      run: dotnet tool install --global GitVersion.Tool --version 5.*
    - name: Generate assembly version
      run: dotnet-gitversion /l console /output buildserver /updateAssemblyInfo
    - name: Show environment variables
      run: echo '${{ toJSON(env) }}'
    - name: Restore nuget packages
      run: dotnet restore --no-cache -v:minimal
    - name: Build solution
      run: dotnet build -c ${{ env.CONFIGURATION }} --no-restore -v:minimal
    - name: Pack solution
      run: dotnet pack --no-build -p:version=${{ env.GitVersion_FullSemVer }} -o:packages -v:minimal
    - name: Upload nuget packages
      uses: actions/upload-artifact@v3
      with:
        name: built-packages
        path: packages/*.nupkg
        if-no-files-found: error
    - name: Run tests
      run: dotnet test -c "${{ env.CONFIGURATION }}" --no-restore --no-build -l:trx --results-directory "TestResults" -v:minimal /p:CollectCoverage=true /p:Exclude="[*.Test]*" /p:Exclude="[Test.*]*" /p:SkipAutoProps=true /p:UseSourceLink=true /p:CoverletOutputFormat=\"json,opencover\" /p:CoverletOutput='..\..\TestResults\Coverage\' /p:MergeWith='..\..\TestResults\Coverage\coverage.json'
    - name: Generate coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.1.9
      with:
        reports: 'TestResults\Coverage\coverage.opencover.xml'
        targetdir: 'TestResults\Coverage'
        reporttypes: 'Html;Badges'
        verbosity: 'Info'
        tag: '${{ env.GitVersion_FullSemVer }}'
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./TestResults/Coverage/
        files: ./coverage.opencover.xml
        path_to_write_report: ./TestResults/Coverage/codecov_report.txt
    - name: Upload test artifacts
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: TestResults
        if-no-files-found: error
