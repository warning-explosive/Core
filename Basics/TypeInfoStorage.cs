namespace SpaceEngineers.Core.Basics
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Reflection;
    using EqualityComparers;

    internal class TypeInfoStorage : ITypeInfoStorage
    {
        private static readonly string[] ExcludedAssemblies =
        {
            nameof(System),
            nameof(Microsoft),
            "Windows",
        };

        private static readonly string[] ExcludedTypes =
        {
            "<>f",
            "<>c",
            "<PrivateImplementationDetails>",
            "AutoGeneratedProgram",
            nameof(Microsoft),
            nameof(System),
            "Windows",
        };

        private readonly IDictionary<Guid, TypeInfo> _collection = new Dictionary<Guid, TypeInfo>();

        public TypeInfoStorage(Assembly[] assemblies, Assembly[] rootAssemblies)
        {
            assemblies = assemblies.Where(a => !a.IsDynamic).ToArray();

            var loadedAssembliesDict = assemblies
                                      .Distinct(new AssemblyByNameEqualityComparer())
                                      .ToDictionary(a => a.GetName().FullName);

            var rootAssembliesDict = rootAssemblies.ToDictionary(a => a.GetName().FullName, a => a);

            var visited = loadedAssembliesDict
                         .Where(a => ExcludedAssemblies.Any(ex => a.Key.StartsWith(ex, StringComparison.InvariantCultureIgnoreCase)))
                         .ToDictionary(k => k.Key, v => false);

            foreach (var root in rootAssemblies)
            {
                visited[root.GetName().FullName] = true;
            }

            OurAssemblies = loadedAssembliesDict
                           .Except(rootAssembliesDict)
                           .Select(pair => pair.Value)
                           .Where(a => IsOurReference(a, loadedAssembliesDict, visited))
                           .Concat(rootAssemblies)
                           .ToArray();

            IEnumerable<Type> ExtractOurTypes(Assembly assembly)
            {
                return assembly.GetTypes()
                               .Where(t => t.FullName != null
                                        && ExcludedTypes.All(mask => !t.FullName.Contains(mask)));
            }

            OurTypes = OurAssemblies
                      .SelectMany(ExtractOurTypes)
                      .ToArray();

            OurTypes.Each(type => _collection.Add(type.GUID, new TypeInfo(type)));

            AllLoadedTypes = assemblies.SelectMany(a => a.GetTypes()).ToArray();
        }

        public Assembly[] OurAssemblies { get; }

        public Type[] OurTypes { get; }

        public Type[] AllLoadedTypes { get; }

        public TypeInfo this[Type type]
            => _collection.ContainsKey(type.GUID)
                   ? _collection[type.GUID]
                   : new TypeInfo(type);

        public bool ContainsKey(Type type)
        {
            return _collection.ContainsKey(type.GUID);
        }

        private bool IsOurReference(Assembly assembly,
                                    IReadOnlyDictionary<string, Assembly> loadedAssemblies,
                                    IDictionary<string, bool> visited)
        {
            var exclusiveReferences = assembly.GetReferencedAssemblies();

            var isReferenced = exclusiveReferences.Any(a => visited.ContainsKey(a.FullName)
                                                            && visited[a.FullName]);

            var key = assembly.GetName().FullName;

            if (isReferenced)
            {
                visited[key] = true;

                return true;
            }

            var result = exclusiveReferences.Where(unknownReference => !visited.ContainsKey(unknownReference.FullName)
                                                                       && ExcludedAssemblies.All(ex => !unknownReference.FullName.StartsWith(ex, StringComparison.InvariantCultureIgnoreCase)))
                                            .Any(unknownReference => loadedAssemblies.TryGetValue(unknownReference.FullName, out var unknownAssembly)
                                                                     && IsOurReference(unknownAssembly, loadedAssemblies, visited));

            visited[key] = result;

            return result;
        }
    }
}