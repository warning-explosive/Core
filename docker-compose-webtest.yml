version: '3'
services:

  # PostgreSql
  postgres:
    build:
      # https://www.datasentinel.io/documentation/features/execution-plans.html
      dockerfile: ./docker-compose/postgres/Dockerfile.postgres
      context: .
    container_name: postgres
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    volumes:
      - ./docker-compose/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./docker-compose/postgres/postgres-init.sql:/docker-entrypoint-initdb.d/postgres-init.sql
    environment:
      - POSTGRES_PASSWORD=Password12!
    ports:
      - '5432:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "postgres", "-U", "postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M

  # Postgres exporter
  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:v0.12.0
    container_name: postgres-exporter
    command:
      - --config.file=/etc/postgres-exporter/postgres-exporter.yaml
      - --extend.query-path=/etc/postgres-exporter/postgres-exporter-queries.yaml
      - --auto-discover-databases
      - --disable-settings-metrics
      - --disable-default-metrics
    volumes:
      - ./docker-compose/postgres/postgres-exporter.yaml:/etc/postgres-exporter/postgres-exporter.yaml
      - ./docker-compose/postgres/postgres-exporter-queries.yaml:/etc/postgres-exporter/postgres-exporter-queries.yaml
    environment:
      - DATA_SOURCE_URI=postgres:5432?sslmode=disable
      - DATA_SOURCE_USER=postgres
      - DATA_SOURCE_PASS=Password12!
    ports:
      - '9187'
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M

  # RabbitMQ
  rabbit:
    image: rabbitmq:3.12.1-alpine
    container_name: rabbit
    volumes:
      - ./docker-compose/rabbitmq/rabbitmq-enabled-plugins:/etc/rabbitmq/enabled_plugins
    ports:
      - '15672:15672'
      - '5672:5672'
      - '15692'
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M

  # Prometheus
  prometheus:
    image: quay.io/prometheus/prometheus:v2.45.0
    container_name: prometheus
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
      - --enable-feature=remote-write-receiver
    volumes:
      - ./docker-compose/prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
    ports:
      - "9090:9090"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M

  # OpenTelemetry collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.81.0
    container_name: otel-collector
    command:
      - --config=/etc/otel-collector-config.yaml
    volumes:
      - ./docker-compose/open-telemetry/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - '4317:4317'   # OTLP gRPC receiver
      - '4318:4318'   # OTLP http receiver
      - "9464"        # Prometheus exporter
      - "8888"        # metrics endpoint
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:1.47.0
    container_name: jaeger
    command:
      - "--memory.max-traces"
      - "1000"
      - "--query.base-path"
      - "/jaeger/ui"
      - "--query.ui-config"
      - "/etc/jaeger/jaeger-ui.json"
    volumes:
      - ./docker-compose/jaeger/jaeger-ui.json:/etc/jaeger/jaeger-ui.json
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
      - PROMETHEUS_TLS_Enabled=false
    ports:
      - '4317'        # accept OpenTelemetry Protocol (OTLP) over gRPC
      - '4318'        # accept OpenTelemetry Protocol (OTLP) over HTTP
      - '14268'       # accept jaeger.thrift directly from clients over HTTP
      - '14269'       # admin HTTP server and metrics
      - '16686:16686' # UI
    restart: unless-stopped
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M

  # Grafana
  grafana:
    image: grafana/grafana:9.5.6
    container_name: grafana
    volumes:
      - ./docker-compose/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./docker-compose/grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M

  ## Test web-app
  #web-app:
  #  depends_on:
  #    - postgres
  #    - rabbit
  #    - jaeger
  #  build:
  #    dockerfile: Dockerfile.webtest
  #    context: .
  #  restart: unless-stopped
  #  environment:
  #    - ASPNETCORE_ENVIRONMENT=Development
  #  ports:
  #    - '5000:80'